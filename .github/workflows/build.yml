name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DotNetVersion: "6.0.202"

jobs:
  build-windows-2022:

    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DotNetVersion }}

    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '[17.0,18.0)'

    - name: Build VS2022
      run: msbuild /restore /v:Minimal /p:VSVersion=2022 /p:Configuration=Release src\Eto.DevExtension.VisualStudio.Windows\Eto.DevExtension.VisualStudio.Windows.csproj /bl:artifacts/log/Build.Windows.2022.binlog

    - name: Upload extensions
      uses: actions/upload-artifact@v2
      with:
        name: extensions-windows
        path: artifacts/Release/*.vsix

    - name: Upload log files
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: log
        path: artifacts/log/**/*

  build-windows-2019:

    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DotNetVersion }}

    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1
      with:
        vs-version: '[16.10,17.0)'

    - name: Build VS2019
      run: msbuild /restore /v:Minimal /p:VSVersion=2019 /p:Configuration=Release src\Eto.DevExtension.VisualStudio.Windows\Eto.DevExtension.VisualStudio.Windows.csproj /bl:artifacts/log/Build.Windows.2019.binlog

    - name: Upload extensions
      uses: actions/upload-artifact@v2
      with:
        name: extensions-windows
        path: artifacts/Release/*.vsix

    - name: Upload log files
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: log
        path: artifacts/log/**/*

  build-mac:

    runs-on: macos-11

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DotNetVersion }}

    - name: Install macos workload
      run: sudo dotnet workload install macos
        
    - name: Setup Xamarin and XCode
      uses: maxim-lobanov/setup-xamarin@v1
      with:
        mono-version: latest
        xamarin-mac-version: latest
        xcode-version: latest
    
    - name: Build VS2019
      run: msbuild /restore /v:Minimal /t:PackageAddin /p:VSVersion=2019 /p:Configuration=Release src/Eto.DevExtension.VisualStudio.Mac/Eto.DevExtension.VisualStudio.Mac.csproj /bl:artifacts/log/Build.Mac.2019.binlog

    - name: Build VS2022
      run: dotnet build /p:VSVersion=2022 /t:PackageAddin /p:Configuration=Release src/Eto.DevExtension.VisualStudio.Mac/Eto.DevExtension.VisualStudio.Mac.csproj /bl:artifacts/log/Build.Mac.2022.binlog

    - name: Upload extensions
      uses: actions/upload-artifact@v2
      with:
        name: extensions-mac
        path: artifacts/Release/*.mpack

    - name: Upload log files
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: log
        path: |
          artifacts/log/**/*
          lib/monomac/artifacts/generated/**/*.binlog
  
  publish:
    needs: [ build-windows-2019, build-windows-2022, build-mac ]
    runs-on: ubuntu-latest
    if: (github.event_name == 'release' && github.event.action == 'published' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Add extensions to release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
          files: |
            '**\*.vsix'
            '**\*.mpack'
